<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>de.papke</groupId>
	<artifactId>cloud-portal</artifactId>
	<version>0.0.1-SNAPSHOT</version>

	<packaging>war</packaging>

	<name>Cloud Portal</name>
	<description>Self service web portal for different Cloud providers like AWS, Azure and VMWare vSphere.</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.5.1.RELEASE</version>
	</parent>

	<properties>

		<!-- project encoding properties -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

		<!-- dependency versions properties -->
		<java.version>1.8</java.version>
		<commons-lang.version>3.6</commons-lang.version>
		<commons-exec.version>1.3</commons-exec.version>
		<commons-io.version>2.5</commons-io.version>
		<velocity.version>1.7</velocity.version>

		<!-- docker build properties -->
		<registry>docker.io</registry>
		<tenant>chrisipa</tenant>
		<opt.folder>/opt</opt.folder>
		<catalina.home>${opt.folder}/tomcat</catalina.home>
        <tomcat.webapps.folder>${catalina.home}/webapps</tomcat.webapps.folder>
        <terraform.version>0.10.7</terraform.version>
        <terraform.vmware.version>1.2</terraform.vmware.version>

	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-logging</artifactId>
        </dependency>
        <dependency>
            <groupId>org.codehaus.janino</groupId>
            <artifactId>janino</artifactId>
        </dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.ldap</groupId>
			<artifactId>spring-ldap-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-ldap</artifactId>
		</dependency>
		<dependency>
			<groupId>com.unboundid</groupId>
			<artifactId>unboundid-ldapsdk</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-mail</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-mongodb</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.session</groupId>
			<artifactId>spring-session-data-mongo</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.session</groupId>
			<artifactId>spring-session</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>${commons-lang.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-exec</artifactId>
			<version>${commons-exec.version}</version>
		</dependency>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>${commons-io.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.velocity</groupId>
			<artifactId>velocity</artifactId>
			<version>${velocity.version}</version>
		</dependency>
	</dependencies>

	<build>

		<finalName>${project.artifactId}</finalName>

		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>io.fabric8</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<extensions>true</extensions>
				<configuration>
					<verbose>true</verbose>
					<registry>${registry}</registry>
					<images>
						<image>
							<name>${registry}/${tenant}/${project.artifactId}</name>
							<alias>${project.artifactId}</alias>
							<build>
								<tags>
									<tag>${project.version}</tag>
								</tags>
								<from>${registry}/${tenant}/tomcat-base:7.0.70</from>
								<optimise>true</optimise>
								<entryPoint>
									<exec>
										<args>/${project.artifactId}.sh</args>
									</exec>
								</entryPoint>
								<cmd>
									<exec>
										<args>catalina.sh</args>
										<args>run</args>
									</exec>
								</cmd>
								<runCmds>

									<!-- update package sources -->
									<run>apt-get update</run>

									<!-- install apt transport https -->
									<run>apt-get install -y apt-transport-https</run>

									<!-- add azure cli package repo -->
									<run>echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ wheezy main" >> /etc/apt/sources.list.d/azure-cli.list</run>
									<run>apt-key adv --keyserver packages.microsoft.com --recv-keys 52E16F86FEE04B979B07E28DB02C46DF417A0893</run>

									<!-- update package sources -->
									<run>apt-get update</run>

									<!-- install azure cli -->
									<run>apt-get install -y --no-install-recommends azure-cli</run>

									<!-- install aws cli -->
									<run>apt-get install -y --no-install-recommends python-pip</run>
									<run>pip install awscli</run>

									<!-- download and install terraform -->
									<run>wget -q https://releases.hashicorp.com/terraform/${terraform.version}/terraform_${terraform.version}_linux_amd64.zip</run>
									<run>unzip -q terraform_${terraform.version}_linux_amd64.zip -d /usr/local/bin</run>
									<run>rm terraform_${terraform.version}_linux_amd64.zip</run>
									
									<!-- download 3rd party VMWare vSphere provider -->
									<run>mkdir -p $HOME/.terraform.d/plugins</run>
									<run>wget -q https://github.com/mkuzmin/terraform-provider-vmware/releases/download/v${terraform.vmware.version}/terraform-provider-vmware.linux -O $HOME/.terraform.d/plugins/terraform-provider-vmware_v${terraform.vmware.version}</run>
									<run>chmod +x $HOME/.terraform.d/plugins/terraform-provider-vmware_v${terraform.vmware.version}</run>

									<!-- clear apt cache -->
									<run>apt-get clean</run>

								</runCmds>
								<assembly>
									<basedir>/</basedir>
									<inline>
										<dependencySets>
											<dependencySet>
												<includes>
													<include>${project.groupId}:${project.artifactId}:${project.packaging}</include>
												</includes>
												<outputDirectory>${tomcat.webapps.folder}/${project.artifactId}</outputDirectory>
												<unpack>true</unpack>
											</dependencySet>
										</dependencySets>
										<fileSets>
											<fileSet>
												<directory>${project.basedir}/src/main/resources/docker/entrypoint</directory>
												<outputDirectory>/</outputDirectory>
												<includes>
													<include>**/*</include>
												</includes>
											</fileSet>
											<fileSet>
												<directory>${project.basedir}/src/main/resources/docker/ROOT</directory>
												<outputDirectory>${tomcat.webapps.folder}/ROOT</outputDirectory>
												<includes>
													<include>**/*</include>
												</includes>
											</fileSet>
										</fileSets>
									</inline>
								</assembly>
							</build>
						</image>
					</images>
				</configuration>
			</plugin>
		</plugins>

	</build>

</project>
